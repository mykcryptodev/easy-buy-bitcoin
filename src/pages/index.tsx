import Head from "next/head";
import { useEffect, useState } from "react";
import type { FC } from "react";
import { Buy } from "~/components/Buy";
import { Sell } from "~/components/Sell";
import AnimatedNumber from "~/components/AnimatedNumber";
import { api } from "~/utils/api";
import Wallet from "~/components/Wallet";
import { useAccount } from "wagmi";
import dynamic from "next/dynamic";

const PriceChart = dynamic(() => import("~/components/PriceChart"), { ssr: false });

const Home: FC = () => {
  const { address } = useAccount();
  const [price, setPrice] = useState<number>(45000);
  const { data } = api.coingecko.getTokenCardDataById.useQuery({
    id: "coinbase-wrapped-btc",
  });
  useEffect(() => {
    if (!data)  return;
    setPrice(data.current_price);
  }, [data, data?.current_price]);

  const [activeAction, setActiveAction] = useState<"buy" | "sell" | undefined>();
  
  return (
    <>
      <Head>
        <title>Buy Bitcoin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {address && (<Wallet className="z-10" />)}
        {data && (
          <div className="absolute w-full h-full">
            <PriceChart />
          </div>
        )}
        <div className="flex flex-col items-center justify-center max-w-md gap-2 z-10 rounded-2xl">
          <div className="text-7xl tracking-tighter font-bold">Buy Bitcoin</div>
          <div className="flex items-center gap-2 mb-8">
            <div className="text-4xl font-bold">
              {data && (
                <AnimatedNumber
                  value={price}
                  formatOptions={{
                    style: "currency",
                    currency: "usd",
                    maximumFractionDigits: 0,
                  }}
                />
              )}
            </div>
          </div>
          {(!activeAction && address) ? (
            <div className="flex justify-center w-full max-w-md items-center gap-2">
              <button 
                className="btn btn-lg w-1/2 btn-primary"
                onClick={() => setActiveAction("buy")}
              >
                Buy
              </button>
              <button 
                className="btn btn-lg w-1/2 btn-secondary"
                onClick={() => setActiveAction("sell")}
              >
                Sell
              </button>
            </div>
          ) : (
            <Wallet />
          )}
          {activeAction === "buy" && (
            <Buy goBack={() => setActiveAction(undefined)} />
          )}
          {activeAction === "sell" && (
            <Sell goBack={() => setActiveAction(undefined)} />
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
